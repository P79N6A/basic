本包演示本地方法的调用
JNI是Java Native interface的缩写，是java平台调用本地语言尤其针对c和c++设计的。接下来介绍在Mac OS上如何编译JNI的动态库。

编写java类

需要先编写一个java的类。

public class MacJni {

    public native void sayHello();

    static {
        System.loadLibrary("macjni");
    }

    public static void main(String[] args) {
        MacJni macJni = new MacJni();
        macJni.sayHello();

    }
}
定义了一个MacJni的类，在他的main中调用定义的native的方式sayHello。
在这个类的static中加载native的类库macjni,注意在linux上面动态库的命名是.so文件，在mac上面的命名是.jnilib文件,类库的名字需要在开头加上lib,也就是在Mac os上面动态库的名称应该是libmacjni.jnilib

生成.java

通过命令生成.class文件:

javac MacJni.java
生成.h文件

通过命令生成.h文件:

javah MacJni
文件内容:

* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class MacJni */

#ifndef _Included_MacJni
#define _Included_MacJni
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     MacJni
 * Method:    sayHello
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_MacJni_sayHello
  (JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif
文件定义了一个方法Java_MacJni_sayHello，这个方法就是c提供给java调用的。jni在c中定义的规则是:Java_包名_类名_方法名。

编写.c文件

根据定义.h方法，需要编写一个.c文件MacJni.c，用来实现Java_MacJni_sayHello。

#include <stdio.h>
#include "MacJni.h"

JNIEXPORT void Java_MacJni_sayHello(JNIEnv * env, jobject obj){
    printf("hello from jni");
}
这个方法很简单就是打印一句话。

编译.c

在MacJni.h中有一句话#include <jni.h>，jni.h是jdk中的头文件，在编译的时候需要指定他对应的在jdk中的位置，在编译.c的时候需要指定jni.h的所在。在Mac OX中他所在的位置是/System/Library/Frameworks/JavaVM.framework/Headers。
通过命令编译.c:

gcc -I/System/Library/Frameworks/JavaVM.framework/Headers -c MacJni.c
得到一个新的文件MacJni.o,需要把.o文件打包成动态库。

打包动态库

通过命令打包动态库:

gcc -dynamiclib -o libmacjni.jnilib MacJni.o
把.o文件打包成了libmacjni.jnilib。
现在可以通过java调用c的方法了,完成了对于JNI的编译。

java MacJni
输出:

hello from jni